program        → declaration* EOF ;
declaration    → statement ;
varDeclStmt    → "let" declExpr ( "," declExpr )* ";" ;
varDecl        → "let" declExpr ;
declExpr       → IDENT ( "=" expression )?;
statement      → exprStmt | printStmt | varDeclStmt | ifStmt | whileStmt | forStmt | block | "break" ";" || "continue" ";" || ";" ;
block          → "{" declaration* "}" ;
ifStmt         → "if" "(" expression ")" statement "else" statement ;
whileStmt      → "while" "(" expression ")" statement ;
forStmt        → "for" "(" ( varDeclStmt | exprStmt | ";" ) expression? ";" exprBlock? ")" statement ;
exprStmt       → exprBlock ";" ;
exprBlock      → expression ( "," expression)* ;
printStmt      → "print" expression ";" ;
expression     → assignment | varDecl ;
assignment     → IDENT ( "=" | "+=" | "-=" | "*=" | "/=" ) assignment | IDENT ( "++" | "--" )  | logic_or ;
logic_or       → logic_and ( "||" logic_and )* ;
logic_and      → ternary ( "&&" ternary )* ;
ternary        → equality ( "?" ternary ":" ternary )? ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary | call;
call           → primary ( "(" exprBlock? ")" )? ;
primary        → NUMBER | STRING | "(" expression ")" | IDENT ;